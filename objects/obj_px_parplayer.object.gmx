<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_px_mario_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Objeto raíz del presonaje jugador

//Desactivar movimiento
//1: Se puede mover, 0: No se puede mover
enable_gravity = 1

//Estado actual del jugador
//0: Quieto, 1: Caminando, 2: Saltando, 3: Trepando, 4: Trepando/Saltando en la pared
state = 0

//Dirección actual
//1: Derecha, -1: Izquierda
xscale = 1

//¿Tiene algo siguiendolo?
following = 0

//Estado variable de salto
//0: Puede saltar, 1: Salto variable, 2: No puede saltar
jumpnow = 0

//¿Está resbalando?
skidnow = 0

//¿Está nadando?
swimming = 0

//¿Está agachado?
crouch = 0

//¿Es invencible?
//0: No, 1: Si, -1 Fantasma
invincible = 0

//¿Está pateando algo?
kicking = 0

//¿El piso está resbaloso?
slipery = 0

//Desabilitar controles
disablecontrols = 0

//¿Puede flotar?
floating = 0

//¿Qué tanto puede flotar?
floattime = 0

//¿Está flasheando?
isflashing = 0

//¿Cuantos combos se armó?
hitcombo = 0

//Variable plantilla de estado
statedelay = 0

//Salto de pared
walljump = 0

//Dobe salto
doublejump = 0

//No sé qué es esto
netsmack = 0

//Efecto Estrella
blend_star = c_white

//Velocidad caminando
walkspeed = 1.5

//Velocidad corriendo
runspeed = 3

//Velocidad corriendo (Medidor P lleno)
fullrunspeed = 3

//Maneja el humo cuando derrapa
alarm[5] = 8

//Maneja las burbujas de cuando está nadando
alarm[9] = 24 + random(96)

//¿Mario tiene algo siguiendolo desde otra room?
if global.shallihold &gt; 0
{
    following = global.shallihold
    global.shallihold = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deja de sonar toda esta mierda

//Resbalando
if skidnow = 1
    audio_stop_sound(snd_skid)
    
//Flotar
if floattime = 1
    audio_stop_sound(snd_tailspin)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crea el efecto de burbujas
if swimming = 1
    instance_create(x-2+6*xscale,bbox_top+7,obj_bubble)
alarm[9] = 24 + random(96)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Termina de patear culos
kicking = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Genera el humo derrapante
if global.pmeter &gt; 5 
&amp;&amp; state == 1 
&amp;&amp;(sprite_index == scr_px_run()
|| sprite_index == scr_px_walk()){
    
    var smk_dir;
    if(xscale == 1)
        smk_dir = -12;
    else
        smk_dir = 12;
            
    with instance_create(x+smk_dir,y+28,obj_smoke){
        
        sprite_index = spr_runsmoke;
        image_speed = 0.20;
        depth = -6;
    };    
};
else{

if skidnow = 1
{

    //If Mario is wall jumping, reverse where the smoke appears
    if (xscale = 1 and state != 4)
    or (xscale = -1 and state = 4)
    {
        with instance_create(x+1,y+24,obj_smoke)
        {
            sprite_index = spr_skidsmoke
            depth = -6
        }
    }
    else
    {
        with instance_create(x-8,y+24,obj_smoke)
        {
            sprite_index = spr_skidsmoke
            depth = -6
        }
    }

}
};
alarm[5] = 8
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hace que ya no sea invencible
invincible = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hace que el parpadeo pare
image_alpha = 1
if invincible = 1
    alarm[1] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hace al personaje parpadear
alarm[2] = 1
image_alpha = 0.1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reiniciar variable de seguimiento
following = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movimiento
if (enable_gravity != 0)
{
    //If Mario is moving down
    if vspeed &gt; 0
    {

        //Check for a solidtop below Mario
        var solidtop = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_solidtop,0,0)
    
        //If Mario is above a solidtop
        if solidtop
        and bbox_bottom &lt; solidtop.yprevious+5
        and not collision_rectangle(bbox_left,bbox_top+4,bbox_right,solidtop.y-1,obj_solid,1,0)
        {

            //Snap to position
            y = solidtop.y-32

            //Stop vertical movement
            vspeed = 0
            gravity = 0

            //Allow Mario to jump
            if jumpnow = 2
                jumpnow = 0

            //Reset hit counter
            hitcombo = 0

            //Reset flying
            floattime = 0
            
            //Reset wall jump
            walljump = 0
            
            //Reset double jump
            doublejump = 0
        
            with(instance_create(x,y+32,obj_smoke)){
                sprite_index = spr_landsmoke;
                image_speed = 0.25;
            }
        }

    }

    //Embed Mario into the slope if he is walking to ensure correct slope mechanics
    if collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+4,obj_slopeparent,1,0)
    and not collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_slopeparent,1,0)
    and state = 1
        y+=4

    ///Handle slope collisions
    if collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeparent,1,0)
    and not collision_rectangle(bbox_left,bbox_bottom-8,bbox_right,bbox_bottom-8,obj_slopeparent,1,0)
    {

        //If Mario is moving down onto a slope
        if vspeed &gt; 0
        {

            //Stop vertical movement
            vspeed = 0
            gravity = 0

            //Allow Mario to jump
            if jumpnow = 2
                jumpnow = 0

            //Reset hit counter
            hitcombo = 0

            //Reset flying
            floattime = 0
            
            //Reset wall jump
            walljump = 0
            
            //Reset double jump
            doublejump = 0

        }

        //Prevent Mario from getting embed inside a slope
        if vspeed &gt; -0.85
            while collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeparent,1,0)
                y--

    }

    //Select a different step event based on Mario's state
    if swimming = 0
    {

        //Climb script
        if state = 3
            event_user(4)

        //Wall climb/jump script
        else if state = 4
            event_user(5)

        //Default movement script
        else
            event_user(2)

    }

    //Swim script
    else
        event_user(3)

    //If Mario is bumping into a wall to the right
    if hspeed &gt; 0
    and collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)
    {

        //Stop Mario's horizontal speed
        hspeed = 0

        //Prevent Mario from getting embed into the wall
        while collision_rectangle(bbox_right,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,1,0)
        and not collision_point(x,bbox_top+4,obj_solid,0,0)
            x--

    }

    //If Mario is bumping into a wall to the left
    else if hspeed &lt; 0
    and collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)
    {

        //Stop Mario's horizontal speed
        hspeed = 0

        //Prevent Mario from getting embed into the wall
        while collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)
        and not collision_point(x,bbox_top+4,obj_solid,0,0)
            x++

    }

    //If Mario's head is bumping the ceiling
    if vspeed &lt; 0
    and collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,0)
    {

        //Prevent Mario's head from getting embed in the ceiling
        if state &gt; 1
            while collision_rectangle(bbox_left,bbox_top+1,bbox_right,bbox_top+1,obj_solid,1,0)
                y++

        //Stop vertical movement
        vspeed = 0

        //If frog/penguin Mario is not swimming, and Mario is not climbing or wall climbing
        if state &lt; 3
        {
            //Bump sound
            audio_play_sound(snd_bump,0,0)

            //Stop variable jumping
            jumpnow = 2

        }

    }

    //If Mario is not climbing or wall climbing
    if state &lt; 3
    {

        //If Mario's controls are disabled, and he is not jumping
        if state != 2
        and disablecontrols = 0
        {

            //Makes Mario duck
            if keyboard_check(vk_down)
                crouch = 1

            //Stops Mario from ducking
            else if not keyboard_check(vk_down)
            and not collision_rectangle(bbox_left,bbox_top-16,bbox_right,bbox_top,obj_solid,1,0)
                crouch = 0

        }

        //Handles powerup specific projectiles, tail spinning, and statue morphing
        //if keyboard_check_pressed(vk_control)
        //and obj_levelmanager.barrier = 0
            //alarm[10] = 1

    }

    //If Mario is climbing or wall climbing
    else
    {

        //Disable ducking
        crouch = 0

    }

    //If Mario comes into contact with water, and is not already swimming
    if place_meeting(x,y,obj_swim)
    and swimming = 0
    {

        //Make Mario start swimming
        swimming = 1

        //Reset flying
        floattime = 0
        
        //Reset wall jump
        walljump = 0
        
        //Reset double jump
        doublejump = 0

        //If Mario is entering from the top
        if collision_point(x,y+33,obj_swim,0,0)
        and not collision_point(x,y,obj_swim,0,0)
        {

            //Reset Mario's vertical speed
            vspeed = 0

            //Create a water splash effect
            with instance_create(x-8,y+17,obj_smoke)
            {
                sprite_index = spr_splash
                depth = -6
            }

        }

        //Disable carrot and bee Mario floating
        floating = 0

        //Stop carrot/bee Mario's floating sound
        if floattime = 1
        {
            audio_stop_sound(snd_tailspin)
            floattime = 0
        }

        //Make sure Mario is not climbing
        if state &gt; 2
            state = 2

    }

    //Prevents Mario from going too high
    if y &lt; -96
        y = -96

    //If he falls out of the room
    else if bbox_top &gt; room_height
    {

        //Give crown Mario one last chance to survive
        if global.player = 2
        and doublejump != -1
        {
            doublejump = -1
            vspeed = -4.5
            y -= 8
            jumpnow = 1
            audio_play_sound(snd_jump,0,0)
            audio_play_sound(snd_stomp,0,0)
        }

        //Otherwise, kill Mario
        else
        {
            with instance_create(x,room_height-32,obj_px_deadplayer) visible = 0;
            instance_destroy();
        }
    
    }
}
else
{
    gravity = 0;
    hspeed = 0;
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario kick something

//Mario is now kicking
kicking = 1

//Finish kicking animation
alarm[6] = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Give Mario temporary invincibility

//If Mario is not star invincible
if invincible != -1
{

    //Make Mario invincible
    invincible = 1

    //Make Mario's alpha blink
    alarm[1] = 1

    //Make Mario not invincible after a cooldown
    alarm[3] = 120

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's wall climbing + wall jumping step event

//If Mario does not have the appropriate powerup
if (global.player != 0)

//Or if wall jump Mario moves away from the wall, or is not against a wall
or ((global.player = 0)
and (direct = -1 and (keyboard_check(vk_left) or not collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0))
or direct = 1 and (keyboard_check(vk_right) or not collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0))))

//Or if Mario reaches the floor
or collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)
or collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_slopeparent,1,0)
{

    //Switch to the jump state
    state = 2

    //Disable variable jumping
    jumpnow = 0

    //Do not execute the rest of this event
    exit

}

//If Mario is just wall jumping, slide down the wall
vspeed = 1

//Handle jumping
if keyboard_check_pressed(vk_shift)
and disablecontrols = 0
{

    //Jump
    vspeed = -3.75

    //Play the jump sound
    audio_play_sound(snd_jump,0,0)

    //Enable variable jumping
    jumpnow = 1

    //Switch to the jump state
    state = 2

    //Otherwise, make wall jump effects
    audio_play_sound(snd_stomp,0,0)

    //Move away from the wall
    hspeed = 3*xscale

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's climbing step event

//If Mario's controls are not disabled
if disablecontrols = 0
{

    //Handle moving left
    if keyboard_check(vk_left)
    and not keyboard_check(vk_right)
    {
        hspeed = -1
        xscale = -1
    }

    //Handle moving right
    else if keyboard_check(vk_right)
    and not keyboard_check(vk_left)
    {
        hspeed = 1
        xscale = 1
    }

    //Stop horizontal movement
    else
        hspeed = 0

    //Handle moving up
    if keyboard_check(vk_up)
    and not keyboard_check(vk_down)
        vspeed = -1

    //Handle moving down
    else if keyboard_check(vk_down)
    and not keyboard_check(vk_up)
        vspeed = 1

    //Stop vertical movement
    else
        vspeed = 0

    //Handle jumping off of a climbable surface
    if keyboard_check_pressed(vk_shift)
    {

        //Jump
        vspeed = -3.75

        //Play the jump sound
        audio_play_sound(snd_jump,0,0)

        //Enable variable jumping
        jumpnow = 1

        //Switch to the jump state
        state = 2

    }

}

//Stop moving
else
    speed = 0

//If Mario is no longer on a climbable surface, or reaches the floor
if not place_meeting(x,y,obj_climb)
or collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)
or collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_slopeparent,1,0)
{

    //Switch to the jump state
    state = 0

    //Disable variable jumping
    jumpnow = 0

}

//Smack the net to kill Net Koopas
if keyboard_check_pressed(vk_control)
and place_meeting(x,y,obj_climb_net)
{

    //The kill variable that Net Koopas check for
    netsmack = 1

    //Disable the kill variable after a short time
    alarm[4] = 2

    //The sound of Mario smacking the net
    audio_play_sound(snd_bump,0,0)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mario's swimming step event

//The default swim script


//Figure out Mario's state
if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)
or collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_slopeparent,1,0))
and gravity = 0
{

    //Figure out if Mario is standing or walking
    if hspeed = 0
        state = 0
    else
        state = 1

    //Reset state delay
    statedelay = 0

}

//Mario is jumping if there is no ground below him
else
{

    //Delay the change to the jump state
    if statedelay &gt; 4
        state = 2
    else
        statedelay++

        //Set gravity
        gravity = 0.125

}

//Prevent Mario from falling down too fast
if vspeed &gt; 1.5
vspeed = 1.5

//Handles swimming
if keyboard_check_pressed(vk_shift)
and disablecontrols = 0
{

    //If up is being pressed
    if keyboard_check(vk_up)
    {

        //Swim higher
        vspeed = -3.5
        
    }

        //Swim lower if down is being pressed
        else if keyboard_check(vk_down)
        and crouch = 0
            vspeed = -1

        //Default swim height
        else
            vspeed = -2.5

        //Play the swim sound
        audio_play_sound(snd_swim,0,0)

        //Switch to the jump state
        state = 2

    }

    //Handles moving right
    if keyboard_check(vk_right)
    and not keyboard_check(vk_left)
    and disablecontrols = 0
    and (isduck = 0 or state = 2)
    {

        //Accelerate more if he is skidding
        if hspeed &lt; 0
            hspeed += 0.075

        //Accelerate
        hspeed += 0.06

        //Face right
        direct = 1

    }

    //Handles moving left
    else if keyboard_check(vk_left)
    and not keyboard_check(vk_right)
    and disablecontrols = 0
    and (isduck = 0 or state = 2)
    {

        //Accelerate more if he is skidding
        if hspeed &gt; 0
            hspeed += -0.075

        //Accelerate
        hspeed += -0.06

        //Fsce left
        direct = -1

    }

    //If Mario is not trying to move to the left or right
    else
    {

        //Slow down Mario's horizontal speed
        if hspeed &gt; 0
            hspeed-=0.05
        if hspeed &lt; 0
            hspeed+=0.05

        //If Mario is slow enough, stop his horizontal speed entirely
        if abs(hspeed) &lt; 0.05
            hspeed = 0

    }

    //Prevent Mario from moving too fast, and let him move faster when not on the ground
    if state = 2
    {
        if hspeed &gt; 1.5
            hspeed = 1.5
        if hspeed &lt; -1.5
            hspeed = -1.5
    }
    else
    {
        if hspeed &gt; 0.5
            hspeed = 0.5
        if hspeed &lt; -0.5
            hspeed = -0.5
    }

    //Make sure that the swim sound is not looping
    if noisy = 1
    {
        noisy = 0
        audio_stop_sound(snd_swim)
    }



//If Mario is no longer in water
if not place_meeting(x,y,obj_swim)
{

    //Make Mario stop swimming
    isswim = 0

    //Reset variable jumping
    jumpnow = 0

    //If Mario came out of the water from the top
    if place_meeting(x,y+2,obj_swim)
    {

        //Create the splash effect
        with instance_create(x-8,y+17,obj_smoke)
        {
            sprite_index = spr_splash
            depth = -6
        }

        //Jump out of the water if shift is being held
        if keyboard_check(vk_shift)
        {
            vspeed = -3.85
            jumpnow = 1
        }

    }

    //Make sure that the swim sound is not looping
    if noisy = 1
    {
        noisy = 0
        audio_stop_sound(snd_swim)
    }

}

//Disable the spin jump kill ability if Mario is not in a shoe
if global.yoshi != 2
    stompstyle = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Evento de movimiento predeterminado

//Figure out Mario's state
if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)
or collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_slopeparent,1,0))
and gravity = 0
{

    //Figure out if Mario is standing or walking
    if hspeed = 0
        state = 0
    else
        state = 1

    //Reset state delay
    statedelay = 0

}

//Mario is jumping if there is no ground below him
else
{

    //Delay the change to the jump state
    if statedelay &gt; 4
        state = 2
    else
        statedelay++

}

//Check if Mario is standing on a slippery surface
if collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_slippery,0,0)
    slipery = 1
else
    slipery = 0

//Prevent Mario from falling down too fast
if vspeed &gt; 4
    vspeed = 4

//Figure out what Mario's max speed should be

//If the run key is being held, go faster
else if keyboard_check(vk_control)
{
    if global.pmeter &gt; 6
        hspeedmax = fullrunspeed
    else
        hspeedmax = runspeed
}
    
//Otherwise, move slower
else
    hspeedmax = walkspeed

//Handles Mario's jumping
if keyboard_check_pressed(vk_shift)
and disablecontrols = 0

//Make sure that Mario can jump
and ((jumpnow = 0
and state &lt; 2)

//Allow Mario to jump off of Yoshi or a shoe while in midair)
or crouch = 0)
{

    //Jump higher if Mario is running
    if abs(hspeed) &gt; runspeed-0.2
        vspeed = -4.5

    //If Mario is not running
    else
    {

        //Jump even lower if you are walking super slowly
        if round(hspeed/2) = 0
            vspeed = -3.85

        //Jump slightly higher if you are walking
        else
            vspeed = -4.05

    }


    //Play the jump sound if he is not spin jumping
    audio_play_sound(snd_jump,0,0)

    //Enable variable jumping
    jumpnow = 1

    //Switch to the jump state
    state = 2

}

//Check if Mario should still be variable jumping
if keyboard_check_released(vk_shift)
and jumpnow = 1
    jumpnow = 2

//If Mario is ducking on the ground
if crouch = 1 and state != 2
{

    //Slow down Mario's horizontal speed
    if hspeed &gt; 0
        hspeed-=0.05
    if hspeed &lt; 0
        hspeed+=0.05

    //If Mario is slow enough, stop his horizontal speed entirely
    if abs(hspeed) &lt; 0.05
        hspeed = 0

}

//If Mario is not ducking on the ground
else
{

    //Handles moving right
    if keyboard_check(vk_right)
    and not keyboard_check(vk_left)
    and disablecontrols = 0
    {

        //If Mario is not at his maximum speed
        if hspeed &lt; hspeedmax
        {

            //Accelerate slower if he is on a slippery surface
            if slipery = 1
                hspeed += 0.04

            //Default acceleration
            else
            {

                //Accelerate more if he is skidding
                if hspeed &lt; 0
                    hspeed += 0.075

                //Accelerate
                hspeed += 0.06

            }
        }

        //Change Mario's direction if he is not wall jumping
        if walljump = 0
            xscale = 1

    }

    //Handles moving left
    else if keyboard_check(vk_left)
    and not keyboard_check(vk_right)
    and disablecontrols = 0
    {

        //If Mario is not at his maximum speed
        if hspeed &gt; -hspeedmax
        {

            //Accelerate slower if he is on a slippery surface
            if slipery = 1
                hspeed -= 0.04

            //Default acceleration
            else
            {

                //Accelerate more if he is skidding
                if hspeed &gt; 0
                    hspeed += -0.075

                //Accelerate
                hspeed += -0.06

            }
        }

        //Change Mario's direction if he is not wall jumping
        if walljump = 0
            xscale = -1
    }

    //Takes care of slowing Mario down if he is not jumping and left/right is not being pressed
    else if state != 2
    {

        //If Mario is not on a slippery surface
        if slipery = 0
        {

            //Slow down Mario's horizontal speed
            if hspeed &gt; 0
                hspeed-=0.05
            else if hspeed &lt; 0
                hspeed+=0.05

            //If Mario is slow enough, stop his horizontal speed entirely
            if abs(hspeed) &lt; 0.05
                hspeed = 0

        }
        else
        {

            //Slow down Mario's horizontal speed
            if hspeed &gt; 0
                hspeed-=0.025
            else if hspeed &lt; 0
                hspeed+=0.025

            //If Mario is slow enough, stop his horizontal speed entirely
            if abs(hspeed) &lt; 0.025
                hspeed = 0

        }
    }

    //Slow Mario down if he is faster than his maximum speed
    if state != 2
    and abs(hspeed) &gt; hspeedmax
    {

        //Slow down Mario's horizontal speed
        if hspeed &gt; 0
            hspeed-=0.025
        else if hspeed &lt; 0
            hspeed+=0.025

        //If Mario is slow enough, stop his horizontal speed entirely
        if abs(hspeed) &lt; 0.025
            hspeed = 0
    }

}

//If Mario is jumping
if state = 2
or statedelay &gt; 0
{

    //Variable jumping
    if vspeed &gt; -1
    or jumpnow != 1
    {

        //Normal gravity
        gravity = 0.3

        //End variable jumping if it never ends manually
        if jumpnow = 1
            jumpnow = 2

    }

    //Lower gravity while in the middle of variable jumping
    else
        gravity = 0.1

}

//Makes Mario start climbing
if place_meeting(x,y,obj_climb)
and (keyboard_check(vk_up) or (keyboard_check(vk_down) and state = 2))
and disablecontrols = 0
{

    //Change to climb state
    state = 3

    //Stop movement
    gravity = 0
    speed = 0

    //Disable carrot and bee Mario floating
    floating = 0

    //Reset flying
    floattime = 0

    //Reset wall jump
    walljump = 0

    //Reset double jump
    doublejump = 0

}

//If Mario is jumping, not ducking, not spin jumping, can control himself, and is not riding anything
if state = 2
and crouch = 0
and disablecontrols = 0
{

    //Handles checking whether Mario can wall climb or wall jump 
    if (global.player = 0)
    and vspeed &gt; 0
    {

        //If the direction Mario is facing is pressed, while a wall is in front of him
        if (keyboard_check(vk_right)
        and collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)
        and xscale = 1)
        or (keyboard_check(vk_left)
        and collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)
        and xscale = -1)
        {

            //Make Mario start wall climbing/jumping
            state = 4

            //Stop all vertical movement
            vspeed = 0

            //Disable gravity
            gravity = 0

            //Disable carrot and bee Mario floating
            floating = 0

            //Change facing direction
            xscale = -xscale

            //Stop carrot/bee Mario's floating sound
            if floattime = 1
            {
                audio_stop_sound(snd_tailspin)
                floattime = 0
            }

            //He wall jumped
            walljump = 1

        }

    }


    //Stop floating
    floating = 0

    //Handle super crown Mario's floating and double jumping
    if global.player = 2
    {

        //Double jump
        if doublejump = 0
        and jumpnow != 1
        and (keyboard_check_pressed(vk_shift)
        and keyboard_check(vk_up))
        {

            //Double jump
            doublejump = 1

            //Move up
            vspeed = -3.85

            //Enable variable jumping
            jumpnow = 1

            //Play the jump sound
            audio_play_sound(snd_jump,0,0)

            //Make wall jump effects
            audio_play_sound(snd_stomp,0,0)
            instance_create(x,y+32,obj_spinthump)

        }

        //Floating
        if floattime &lt; 128
        and vspeed &gt;= 0
        and (keyboard_check(vk_shift))
        {
            vspeed = 0
            gravity = 0
            floattime++
        }
        else if vspeed &lt; 0
            floattime = 0

    }

}

//Stop floating
else
    floating = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hace al jugador rebotar

//Enable variable jumping if shift is held down
if keyboard_check(vk_shift)
    jumpnow = 1
else
    jumpnow = 2

//Switch to the jump state
state = 2

//Bounce up
vspeed = -4

//Boost jump
y--
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dañar al jugador
//Si no es invencible
if invincible = 0
{
    //Hacer a Mario temporalmente invencible
    event_user(6)
    
    //Salud
    if health &gt; 1
    {
        audio_play_sound(snd_hurtwarp,0,0)
        health--
    }
    else
    {
        instance_create(x,y,obj_px_deadplayer);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destruir
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
