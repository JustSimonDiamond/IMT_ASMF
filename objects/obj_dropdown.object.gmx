<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_cat_attack</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///El jugador cuando se enoja porque le dicen furro

//Animate
image_speed = 0.35;

//Combo
hitcombo = 0;

//Whether the player can cancel the dropdown
ready = 0;

//Estrella
blend_star = c_white

//Make the player invincible, disable his controls and stop him.
with (obj_playerparent) {
    
    //Saber que webas hay que hacer
    xspeed = hspeed
    yspeed = vspeed
    
    //Stop the player
    xspeed = 0;
    yspeed = 0;
    
    //Disable gravity
    disablegravity = 0;
    
    //Make Mario invisible.
    visible = false;
    
    //Make Mario invulnerable.
    invincible = true;
    
    //Disable Mario's controls
    disablecontrols = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End dropdown

with (obj_playerparent) {

    //Enable grav
    disablegravity = 0;
    
    //Make the player visible.
    visible = true;
    
    //Stop Mario invincibility.
    invincible = 0;
    
    //Enable controls
    disablecontrols = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Leave a trail

alarm[0] = 1;
with (instance_create(x-(12*sign(hspeed)),y-8+random_range(-4,4),obj_smoke))
    sprite_index = spr_smoke_c;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default end step script

//Moving platform collision
event_user(5);

//Destroy in contact with lava
if (collision_rectangle(bbox_left,bbox_bottom+7,bbox_right,bbox_bottom+7+vspeed,obj_lava,1,0)) {

    //Ignore the following event if the object is a baburu shoe
    if (sprite_index != spr_baburushoe) {

        //Play 'Podoboo' sound
        audio_play_sound(snd_podoboo, 0, false);
        
        //Go poof
        instance_create((bbox_left+bbox_right)/2-8,(bbox_top+bbox_bottom)/2-8,obj_smoke);
        with (instance_create((bbox_left+bbox_right)/2-8,(bbox_top+bbox_bottom)/2-8,obj_smoke))    
            sprite_index = spr_splash_lava;
        
        //Destroy
        instance_destroy();
    }
}

//Move in contact with a left-moving conveyor belt
lconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_left,0,0);
if ((lconv) &amp;&amp; (lconv.image_speed != 0)) {

    if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0))
        x -= 0.75;
}

//Move in contact with a right-moving conveyor belt
rconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_right,0,0);
if ((rconv) &amp;&amp; (rconv.image_speed != 0)) {

    if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0))
        x += 0.75;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dropdown logic

//Wall collision
event_user(3);

//Floor collision
if (image_speed == 0)
    event_user(4);

//If the player does exist.
if (instance_exists(obj_playerparent)) {

    //If the player does have the cat suit
    if (global.powerup == cs_cat) {
    
        //Force end drop-down if the 'Down' key is not longer pressed.
        if ((ready == 1) &amp;&amp; (!keyboard_check(vk_down))) {
            
            //Hereby both hspeed and vspeed
            with (obj_playerparent) {
            
                xspeed = other.hspeed;
                yspeed = other.vspeed;
            }
        
            //Destroy
            instance_destroy();            
        }
        
        else {
    
            //Snap the player onto this object
            obj_playerparent.x = x;
            obj_playerparent.y = y;
                
            //Stop the player
            xspeed = 0;
            yspeed = 0;
            disablegravity = 1;
        }
    }
    else {
    
        //Hereby both hspeed and vspeed
        with (obj_playerparent) {
        
            xspeed = other.hspeed;
            yspeed = other.vspeed;
        }
    
        //Destroy
        instance_destroy();
    }
}
else
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_quicksand">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with moving platforms

/*
//  IMPORTANT NOTE:
//
//  This event must be called in a 'End Step' event, otherwise it will not work properly.
*/

var moving = collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+4,obj_platformparent,0,0);
if (moving) {

    //With this platform
    with (moving) {
    
        //If this instance is on the platform
        if (collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_bottom+4,other.id,0,0)) 
        &amp;&amp; (other.id.bbox_bottom &lt; yprevious+5)
        &amp;&amp; (other.id.vspeed &gt;= 0) {
        
            //Make sure the NPC is not overlapping another platform
            var check = collision_rectangle(other.id.bbox_left,other.id.bbox_bottom-1,other.id.bbox_right,other.id.bbox_bottom+1,obj_solidtop,0,1);
            if (check)
                exit;
                
            //Snap the instance vertically
            other.id.y = ceil(bbox_top-15);
            
            //Move the player horizontally if there is no solid in his way
            if (x &lt; x-xprevious) &amp;&amp; (!collision_rectangle(other.id.bbox_left-1,other.id.bbox_top+4,other.id.bbox_left,other.id.bbox_bottom-5,obj_solid,0,0))
            || (x &gt; x-xprevious) &amp;&amp; (!collision_rectangle(other.id.bbox_right,other.id.bbox_top+4,other.id.bbox_right+1,other.id.bbox_bottom-5,obj_solid,0,0))
                other.id.x += x-xprevious;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default floor/ceiling collisions

//When moving down
if vspeed &gt; 0
{

    //Check for a solidtop below
    var solidtop = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_solidtop,0,0)

    //Handle solidtop collisions
    if solidtop
    and bbox_bottom &lt; solidtop.yprevious+5
        y = solidtop.y+floor(y-bbox_bottom-0.9)

    //Cap fall speed
    if vspeed &gt; 4
        vspeed = 4

}

//Embed into the slope to ensure correct slope mechanics
if collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+4,obj_slopeparent,1,0)
and not collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_slopeparent,1,0)
and vspeed = 0
    y+=4

///Handle slope collisions
if collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeparent,1,0)
and not collision_rectangle(bbox_left,bbox_bottom-8,bbox_right,bbox_bottom-8,obj_slopeparent,1,0)
{
    while collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeparent,1,0)
        y--
}

//Check for floor objects
if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0)
and not collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_solidtop,0,0))
or collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_slopeparent,1,0)
{
    gravity = 0
    if vspeed &gt; 0
        y -= 8
        instance_destroy()
}
else
    gravity = 0.25

//Ceiling check
if vspeed &lt; 0
and collision_rectangle(bbox_left+1,bbox_top+vspeed-1,bbox_right-1,bbox_top-1,obj_solid,1,0)
{
    while collision_rectangle(bbox_left+1,bbox_top,bbox_right-1,bbox_top,obj_solid,1,0)
        y++
    vspeed = 0
}

//Destroy when it falls out of the level
if bbox_top &gt; room_height
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default wall collisions
if (hspeed &gt; 0 and collision_rectangle(bbox_right,bbox_top+1,bbox_right+1,bbox_bottom-4,obj_solid,0,0))
or (hspeed &lt; 0 and collision_rectangle(bbox_left-1,bbox_top+1,bbox_left,bbox_bottom-4,obj_solid,0,0))
    instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drop down

//End animation
image_speed = 0;
image_index = 5;

//Fall
ready = 1;
alarm[0] = 4;

//Set the vertical speed
vspeed = 3;

//Set the horizontal speed
hspeed = 3*sign(obj_playerparent.direct);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw dropdown

//If the player does exist
if (instance_exists(obj_playerparent)) {
    
    //Draw
    draw_sprite_ext(spr_mario_cat_attack,-1,round(x),round(y)+1,obj_playerparent.direct,1,0,blend_star,obj_playerparent.image_alpha);

    //Draw Mario (Super Star)
    if(instance_exists(obj_invincibility))
    {
        repeat(2)
        {
            draw_set_blend_mode(bm_add);
            draw_sprite_ext(sprite_index,image_index,round(x),round(y),obj_playerparent.direct,1,0,blend_star,obj_playerparent.image_alpha);
            draw_set_blend_mode(bm_normal);
        };
    };
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
