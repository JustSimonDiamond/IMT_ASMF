<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spring</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_physicsparent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parent of all SMB3 holdable items

//Do not animate
image_speed = 0

//Whether the object is being held
held = 0

//Facing direction
direct = 1

//Whether the object is in a wall
inwall = 0;

//Whether the object is swimming
swimming = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Protect Mario from the horrors of holding nothing
if held = 1
{
    with obj_playerparent holding = 0
    with obj_warpmario holding = 0
    with obj_doormario holding = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If the item is being held
if held = 1
{
    //Disable underwater movement
    swimming = false;
    
    //If Mario exists
    if instance_exists(obj_playerparent)
    {

        //Snap to position
        x = obj_playerparent.x-8+10*obj_playerparent.direct
        y = obj_playerparent.y+15

        //If control is still being held
        if keyboard_check(vk_control)
        {

            //Make sure Mario is holding
            obj_playerparent.holding = 2

            //Use the same facing direction
            direct = obj_playerparent.direct

        }

        //Otherwise
        else if obj_playerparent.disablecontrols = 0
        {

            //Make Mario kick it
            with obj_playerparent event_user(7)

            //Stop Mario from holding it
            obj_playerparent.holding = 0

            //Stop being held
            held = 0

            //Reset depth
            depth = 0

            //Get thrown
            event_user(2)

        }

        //Be visible
        visible = 1

    }

    //If warp Mario exists
    else if instance_exists(obj_warpmario)
    {

        //Let warp Mario draw the item
        obj_warpmario.myitem = sprite_index

        //Snap to position
        x = obj_warpmario.x-8
        y = obj_warpmario.y+16

        //Make sure Mario is holding
        obj_warpmario.holding = 2

        //Be invisible
        visible = 0

    }

    //If door Mario exists
    else if instance_exists(obj_doormario)
    {

        //Let door Mario draw the item
        obj_doormario.myitem = sprite_index

        //Snap to position
        x = obj_doormario.x-8
        y = obj_doormario.y+16

        //Make sure Mario is holding
        obj_doormario.holding = 2

        //Be invisible
        visible = 0

    }

    //If warp note block exists
    else if instance_exists(obj_warpnoteblock)
    {

        //Snap to position
        x = obj_warpnoteblock.x-8+10*obj_warpnoteblock.direct
        y = obj_warpnoteblock.y+15

        //Make sure Mario is holding
        obj_warpnoteblock.holding = 2

        //Be visible
        visible = 1

    }

    //If jump spawn exists
    else if instance_exists(obj_jumpspawn)
    {

        //Snap to position
        x = obj_jumpspawn.x+2
        y = obj_jumpspawn.y+15

        //Be visible
        visible = 1

    }

    //Otherwise, stop being held
    else
        held = 0

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If the item is not being held
/*
if held = 0
{

    //Default event
    event_inherited()

    //Friction
    if hspeed &gt; 0
        hspeed -= 0.075
    if hspeed &lt; 0
        hspeed += 0.075
    if hspeed &lt; 0.125
    and hspeed &gt; -0.125
        hspeed = 0

}
*/
///Holdable item logic when not held

//If the item is not being held
if (!held) {

    //If the item is not stuck in a solid
    if (!inwall) {
    
        //Inherit step event
        event_inherited();
        
        //Slowdown if in contact with the floor
        if (gravity == 0) {
    
            //If the item is not underwater
            if (!swimming) {
            
                //Slowdown until it stops
                hspeed = max(0,abs(hspeed)-0.075)*sign(hspeed);
                if (abs(hspeed) &lt; 0.075)
                    hspeed = 0;
            }
            
            //Otherwise, if the item is underwater
            else if (swimming) {
                        
                //Slowdown until it stops
                hspeed = max(0,abs(hspeed)-0.0375)*sign(hspeed);
                if (abs(hspeed) &lt; 0.0375)
                    hspeed = 0;            
            }
        }
        
        //Stop it if it gets stuck in a solid
        if (collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,0,0))
        &amp;&amp; (vspeed &lt; 0) {
        
            //Stop movement
            speed = 0;
            gravity = 0;
            
            //Make the item move
            inwall = true;
        }        
    }
    
    //Otherwise, if the item is stuck in a solid
    else {
    
        //Move it until it does not make contact with a solid
        x -= 2.5*sign(direct);
       
        //If the item is not longer overlapping a solid
        if (!collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,0,0))
            inwall = false;        
    }
    
    //Check for a water object
    var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0);
    
    //If the object is not underwater and makes contact with water
    if (water) 
    &amp;&amp; (!swimming) {
    
        //Make the object go underwater
        swimming = true;
        
        //Slowdown
        hspeed = hspeed/2;
        
        //Stop vertical movement
        if (vspeed &gt; 0)
            vspeed = 0;
    }
    
    //Otherwise, if the object is underwater and it's not underwater, end swimming.
    else if (!water) 
    &amp;&amp; (swimming) {
    
        swimming = false;
        hspeed = hspeed*2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_blockparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bumped by a block
if held = 0
and other.vspeed &lt; 0
    vspeed = -4
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interact with this item
if held = 0
{

    //If Mario is above and moving down, use the stomp event
    if other.bbox_bottom &lt; bbox_top-vspeed+5
    and other.vspeed &gt; 0
        event_user(1)

    //Otherwise, if Mario can hold the item
    else if scr_canhold()
    {

        //Force him to hold it
        other.holding = 2

        //Be held
        held = 1

        //Change depth
        depth = -4

        //Disable gravity
        gravity = 0

        //Stop movement
        speed = 0

    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Custom floor / ceiling collision

//When moving down
if (vspeed &gt;= 0) {

    //Check for a semisolid below
    var semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_solidtop,0,0);
    
    //If the semisolid exists, snap above it.
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5)
    &amp;&amp; (!collision_rectangle(x-1,bbox_bottom,x+1,bbox_bottom+4,obj_slopeparent,1,0))
        y = semisolid.bbox_top-16;
}

//Embed the NPC into the slope to ensure correct slope physics.
if (collision_rectangle(x-1,bbox_bottom,x+1,bbox_bottom+4,obj_slopeparent,1,0)) 
&amp;&amp; (!collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom-4,obj_slopeparent,1,0)) 
&amp;&amp; (vspeed == 0)
    y += 4;
    
//Handle slope collision
if (collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom,obj_slopeparent,1,0))
&amp;&amp; (!collision_rectangle(x-1,bbox_bottom-8,x+1,bbox_bottom-8,obj_slopeparent,1,0)) {

    //Stay embed on the slope.
    while (collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom,obj_slopeparent,1,0))
        y--;
}

//Check for floor objects
if ((collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_solidtop,0,0))
&amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_solidtop,0,0)))
|| (collision_rectangle(x-1,bbox_bottom,x+1,bbox_bottom+4,obj_slopeparent,1,0)) {

    //Stop vertical movement if moving down
    if (vspeed &gt; 0) {
    
        vspeed = 0;
        gravity = 0;
    }
}
else {

    //Set the gravity when not underwater
    if (!swimming) {
    
        //Gravity
        gravity = 0.2;
        
        //Cap vertical speed
        if (vspeed &gt; 4)
            vspeed = 4;
    }
    
    //Otherwise, set the gravity when underwater
    else {
    
        //Gravity
        gravity = 0.03;
        
        //Cap vertical speed
        if (vspeed &gt; 1)
            vspeed = 1;
    }
}

//If the player is moving up
if (vspeed &lt; 0)
&amp;&amp; ((collision_rectangle(bbox_left+1,bbox_top-1,bbox_right-1,bbox_top,obj_solid,1,0)) 
|| (collision_rectangle(bbox_left+1,bbox_top-1,bbox_right-1,bbox_top,obj_solid,1,0))) {
    
    //Prevent the NPC from getting stuck on a ceiling.
    while (collision_rectangle(bbox_left+1,bbox_top,bbox_right-1,bbox_top,obj_solid,1,0))
        y++;
    
    //Stop vertical speed
    vspeed = 0;
}

//If moving down and in contact with a slope
if (vspeed &gt;= 0)
    while (collision_rectangle(bbox_left,bbox_top+4,bbox_right,bbox_bottom,obj_solidtop,0,0))
    || (collision_rectangle(x-1,bbox_top,x+1,bbox_bottom-4,obj_slopeparent,1,0))
        y--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default thrown event
/*
var player = instance_exists(obj_playerparent)

hspeed = player.hspeed+2*player.direct

//Move up when solids are not in the way
if not place_meeting(x,y,obj_solid)
    vspeed = -1
else
    vspeed = 0

//Slope fix
while collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slopeparent,1,0)
    y--
*/
///Default throw / kick event.

//If 'Up' is pressed, throw it upwards.
if (keyboard_check(vk_up)) {

    //Play 'Kick' sound.
    audio_play_sound(snd_kick, 0, false);
    
    //Create hit
    with (instance_create(x,y,obj_smoke)) sprite_index = spr_spinthump;
    
    //If the item is not overlapping a solid.
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)) {
        
        //Set the horizontal speed
        hspeed = obj_playerparent.hspeed/2;
        
        //Boost kick
        y -= 2;
        
        //If the item is not in a water surface
        if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0))
            vspeed = -7;
            
        //Otherwise
        else {

            vspeed = -3.5;
            swimming = true;
        }
    }
    else
        inwall = true;
}

//Otherwise, if 'Down' is pressed.
else if (keyboard_check(vk_down)) {
    
    //Check if the object is stuck on a solid and move it
    if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)) {
    
        //Move it to a safe position
        inwall = true;
        
        //Stop it
        hspeed = 0;
    }
    
    //If there's not a slope in place...
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_slopeparent,1,0))
        hspeed = 0.5*obj_playerparent.direct;
    
    //Otherwise
    else
        vspeed = 0.1;    
}

//Otherwise, throw it to the side.
else {
        
    //Play 'Kick' sound.
    audio_play_sound(snd_kick, 0, false);
    
    //Create hit
    with (instance_create(x,y,obj_smoke)) sprite_index = spr_spinthump;

    //If the item is not overlapping a solid.
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,0,0)) {
        
        //Set the vertical speed
        if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,0,0)) {
        
            vspeed = -1;
            swimming = true;
        }
        else
            vspeed = -2;
        
        //If the object is not on contact with a slope
        if (!collision_rectangle(x,bbox_top,x,bbox_bottom-4,obj_slopeparent,1,0))
            hspeed = obj_playerparent.hspeed+1*obj_playerparent.direct;
            
        //Otherwise, do not apply horizontal speed
        else        
            vspeed = 0.1;
    }
    else
        inwall = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default stomped event
//Do nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember the held item when the room ends
if held = 1
{
    global.carrieditem = object_index
    global.carriedsprite = sprite_index
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
