<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_big_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Who is your parent now?

//Mario's current state
//0: Stand, 1: Walk, 2: Jump, 3: Climb, 4: Wall Climb/Jump
state = 0

//Mario's direction
//-1: Left, 1: Right
direct = 1

//Whether Mario is holding something
//0: Nothing, 1: Overhead, 2: On Front 3: Can't Hold Stuff
holding = 0

//Variable jump state
//0: Can Jump, 1: Variable Jump, 2: No Variable Jump
jumpnow = 0

//Is Mario skidding?
skidnow = 0
turning = 0

//Is Mario swimming?
isswim = 0

//Is Mario ducking?
isduck = 0

//Is Mario invincible?
//0: Normal, 1: Invincible, -1: Phase through
invincible = 0

//Is Mario smacking a net?
netsmack = 0

//Is Mario kicking something?
iamkicking = 0

//Is Mario spin jumping?
stompstyle = 0

//Is Mario on a slippery surface?
isslip = 0

//Is Mario's controls disabled?
disablecontrols = 0

//Is carrot/bee Mario floating?
isfloating = 0

//Is the float sound effect playing?
floatnow = 0

//How much longer can bee/crown Mario fly/float?
powerupfly = 0

//Did Mario wall jump?
walljump = 0

//Did squirrel Mario propel upwards yet?
squirrelpropel = 0

//Did Mario double jump?
doublejump = 0

//Is Mario firing a projectile?
firing = 0

//Is leaf/tanooki Mario wiggling his tail?
wiggle = 0

//What direction is frog/penguin Mario swimming in?
swimtype = 0

//Is frog/penguin Mario's swim sound effect looping?
noisy = 0

//Is Mario flashing?
isflashing = 0

//Did Mario made a midair spin?
midair = 0;

//Is Mario doing a groundpound?
groundpound = 0;

//How many consecutive stomps has Mario made?
hitpoint = 0

//State delay variable
statedelay = 0

//Acceleration (when swimming)
acc_swim = 0.025;

//Acceleration (when turning at water)
accskid_swim = 0.05;

//Deceleration (when swimming)
dec_swim = 0.007;

//Gravity (when swimming)
grav_swim = 0.03;

//Variables sin nombre, xd.
blend_star = c_white;
enable_gravity = 1;
catclimbing = 0;
global.pmeter = 0;
walkspeed = 1.5
runspeed = 3
fullrunspeed = 3

//Handles Mario's skid smoke
alarm[5] = 8

//Handles Mario's underwater bubbles
alarm[9] = 24 + random(96)

//Did Mario carry something over from another room?
if global.shallihold &gt; 0
{
    holding = global.shallihold
    global.shallihold = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop these sounds from playing

//Skid sound
if skidnow = 1
    audio_stop_sound(snd_skid)

//Swim sound
if noisy = 1
    audio_stop_sound(snd_swim)

//Float sound
if floatnow = 1
    audio_stop_sound(snd_tailspin)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dejar de voltearse

turning = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Mario's underwater bubble effect
if isswim = 1
    instance_create(x-2+6*direct,bbox_top+7,obj_bubble)
alarm[9] = 24 + random(96)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finish Mario's kicking animation
iamkicking = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Mario's net smack
netsmack = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario no longer invincible
invincible = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario's alpha blink stop
image_alpha = !image_alpha
if invincible = 1
    alarm[2] = 1
else
    image_alpha = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario's alpha blink
image_alpha = !image_alpha
alarm[2] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset holding variable
holding = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles Mario's physics and movement
if (enable_gravity != 0)
{
    //Gold Tanooki shit
    if ((global.powerup) == cs_goldtan) {
        if (instance_number(obj_taninvincible) == 0)
            instance_create(x+8,y,obj_taninvincible);
    }
    
    //If Mario is moving down
    if (vspeed &gt; 0)
    {

        //Check for a solidtop below Mario
        var solidtop = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_solidtop,0,0)
    
        //If Mario is above a solidtop
        if (solidtop
        &amp;&amp; (bbox_bottom &lt; solidtop.yprevious+5)
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_top+4,bbox_right,solidtop.y-1,obj_solid,1,0)))
        {

            //Snap to position
            y = solidtop.y-32;

            //Stop vertical movement
            vspeed = 0;
            gravity = 0;

            //Allow Mario to jump
            if (jumpnow == 2)
                jumpnow = 0;

            //Reset hit counter
            hitpoint = 0;

            //Reset flying
            powerupfly = 0;

            //Reset wall jump
            walljump = 0;

            //Reset squirrel propel
            squirrelpropel = 0;

            //Reset double jump
            doublejump = 0;
            
            //Reset Cat Climbing
            catclimbing = 0;
        
            //Crear el efecto del humo solo si no se está con estos powerups
            if (!isswim
            &amp;&amp; (global.powerup != cs_penguin
            || global.powerup != cs_frog))
            {
                with(instance_create(x,y+32,obj_smoke))
                {
                    sprite_index = spr_landsmoke;
                    image_speed = 0.25;
                }
            }
        }

    }

    //Embed Mario into the slope if he is walking to ensure correct slope mechanics
    if (collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+4,obj_slopeparent,1,0)
    &amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom-4,obj_slopeparent,1,0))
    &amp;&amp; state == 1)
        y+=4;

    ///Handle slope collisions
    if (collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeparent,1,0)
    &amp;&amp; (!collision_rectangle(bbox_left,bbox_bottom-8,bbox_right,bbox_bottom-8,obj_slopeparent,1,0)))
    {

        //If Mario is moving down onto a slope
        if (vspeed &gt; 0)
        {

            //Stop vertical movement
            vspeed = 0;
            gravity = 0;

            //Allow Mario to jump
            if (jumpnow == 2)
                jumpnow = 0;

            //Reset hit counter
            hitpoint = 0;

            //Reset flying
            powerupfly = 0;

            //Reset wall jump
            walljump = 0;

            //Reset squirrel propel
            squirrelpropel = 0;

            //Reset double jump
            doublejump = 0;
            
            //Reset Cat Climbing
            catclimbing = 0;

        }

        //Prevent Mario from getting embed inside a slope
        if (vspeed &gt; -0.85)
            while (collision_rectangle(bbox_left,bbox_bottom-4,bbox_right,bbox_bottom,obj_slopeparent,1,0))
                y--;

    }

    //Select a different step event based on Mario's state
    if (isswim == 0)
    {

        //Climb script
        if (state == 3)
            scr_player_behaviour_climb();

        //Wall climb/jump script
        else if (state == 4)
            scr_player_behaviour_walljump();

        //Default movement script
        else
            scr_player_behaviour_default();

    }

    //Swim script
    else
        scr_player_behaviour_swim();

    //If Mario is bumping into a wall to the right
    if (hspeed &gt; 0
    &amp;&amp; collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0))
    {

        //Stop Mario's horizontal speed
        hspeed = 0;

        //Prevent Mario from getting embed into the wall
        while (collision_rectangle(bbox_right,bbox_top+4,bbox_right,bbox_bottom-1,obj_solid,1,0)
        &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,0,0)))
            x--;

    }

    //If Mario is bumping into a wall to the left
    else if (hspeed &lt; 0
    &amp;&amp; collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0))
    {

        //Stop Mario's horizontal speed
        hspeed = 0;

        //Prevent Mario from getting embed into the wall
        while (collision_rectangle(bbox_left,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)
        &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,0,0)))
            x++;

    }

    //If Mario's head is bumping the ceiling
    if (vspeed &lt; 0
    &amp;&amp; collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,0))
    {

        //Prevent Mario's head from getting embed in the ceiling
        if (state &gt; 1)
            while (collision_rectangle(bbox_left,bbox_top+1,bbox_right,bbox_top+1,obj_solid,1,0))
                y++;

        //Stop vertical movement
        vspeed = 0;

        //If frog/penguin Mario is not swimming, and Mario is not climbing or wall climbing
        if (noisy == 0
        &amp;&amp; state &lt; 3)
        {

            //Bump sound
            audio_play_sound(snd_bump,0,0);

            //Stop variable jumping
            jumpnow = 2;

            //Max out Bee Mario's flight timer
            if (global.powerup == cs_bee)
                powerupfly = 128;

        }

    }

    //If Mario is not climbing or wall climbing
    if (state &lt; 3)
    {

        //If Mario's controls are disabled, and he is not jumping
        if (state != 2
        &amp;&amp; disablecontrols = 0)
        {

            //Makes Mario duck
            if (keyboard_check(vk_down)
            &amp;&amp; global.powerup != cs_frog
            &amp;&amp; holding == 0
            &amp;&amp; noisy == 0)
                isduck = 1;

            //Stops Mario from ducking
            else if ((!keyboard_check(vk_down))
            &amp;&amp; (!collision_rectangle(bbox_left,bbox_top-16,bbox_right,bbox_top,obj_solid,1,0)))
                isduck = 0;

        }

        //Handles powerup specific projectiles, tail spinning, and statue morphing
        if (keyboard_check_pressed(vk_control)
        &amp;&amp; obj_levelmanager.barrier == 0)
            alarm[10] = 1;

    }

    //If Mario is climbing or wall climbing
    else
    {

        //Disable ducking
        isduck = 0;

        //Disable the spin jump kill ability
        stompstyle = 0;

    }

    //If Mario comes into contact with water, and is not already swimming
    if (place_meeting(x,y,obj_swim)
    &amp;&amp; isswim == 0)
    {

        //Make Mario start swimming
        isswim = 1;

        //Reset flying
        powerupfly = 0;

        //Reset wall jump
        walljump = 0;

        //Reset squirrel propel
        squirrelpropel = 0;

        //Reset double jump
        doublejump = 0;
        
        //Reset Cat Climbing
        catclimbing = 0;

        //If Mario is entering from the top
        if (collision_point(x,y+33,obj_swim,0,0)
        &amp;&amp; (!collision_point(x,y,obj_swim,0,0)))
        {

            //Reset Mario's vertical speed
            vspeed = 0;

            //Create a water splash effect
            with (instance_create(x-8,y+17,obj_smoke))
            {
                sprite_index = spr_splash;
                depth = -6;
            }

        }

        //Disable carrot and bee Mario floating
        isfloating = 0;

        //Stop carrot/bee Mario's floating sound
        if (floatnow == 1)
        {
            audio_stop_sound(snd_tailspin);
            floatnow = 0;
        }

        //Make sure Mario is not climbing
        if (state &gt; 2)
            state = 2;

    }

    //Prevents Mario from going too high
    if (y &lt; -96)
        y = -96;

    //If he falls out of the room
    else if (bbox_top &gt; room_height)
    {

        //Give crown Mario one last chance to survive
        if (global.powerup == cs_crown
        and doublejump != -1)
        {
            doublejump = -1;
            vspeed = -4.5;
            y -= 8;
            jumpnow = 1;
            audio_play_sound(snd_jump,0,0);
            audio_play_sound(snd_stomp,0,0);
        }

        //Otherwise, kill Mario
        else
        {
            instance_create(x,room_height-32,obj_deadfall);
            instance_destroy();
        }
    
    }
}
else
{
    gravity = 0;
    hspeed = 0;
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario kick something

//Mario is now kicking
iamkicking = 1

//Finish kicking animation
alarm[6] = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Give Mario temporary invincibility

//If Mario is not star invincible
if invincible != -1
{

    //Make Mario invincible
    invincible = 1

    //Make Mario's alpha blink
    alarm[1] = 1

    //Make Mario not invincible after a cooldown
    alarm[3] = 120

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make Mario bounce off of something

//Enable variable jumping if shift is held down
if keyboard_check(vk_shift)
    jumpnow = 1
else
    jumpnow = 2

//Switch to the jump state
state = 2

//Bounce up
vspeed = -4

//Boost jump
y--

//Reset squirrel propel
squirrelpropel = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hurt Mario
//If Mario is not invincible
if invincible = 0
{

    //Make Mario temporarily invincible
    event_user(6)

    //If Mario is not riding anything
    if global.yoshi = 0
    {

        //If Mario is small
        if global.powerup = cs_small
        {

            //Kill Mario
            instance_create(x,y,obj_deadmario)
            instance_destroy()

        }

        //If Mario is not small
        else
        {

            //If Mario is big
            if global.powerup = cs_big
            {

                //Make him small
                global.powerup = cs_small
                with instance_create(0,0,obj_mario_transform) sequence = 1;

            }

            //Otherwise, make him big
            else
            {
                global.powerup = cs_big
                with instance_create(0,0,obj_mario_transform) sequence = 3;
            }

            //Play hurt sounds
            audio_play_sound(snd_hurtwarp,0,0)

        }

    }

    //If Mario is riding something
    else
    {

        //If Mario is on a Yoshi
        if global.yoshi = 1
        {

            //Create runaway Yoshi
            instance_create(obj_yoshi.x,obj_yoshi.y,obj_yoshi_runaway)

            //Destroy Yoshi
            with obj_yoshi instance_destroy()

        }

        //If Mario is on a shoe
        else if global.yoshi = 2
        {

            //No more shoe kill ability
            stompstyle = 0

            //Play hurt sounds
            audio_play_sound(snd_magic,0,0)

            //Destroy the shoe
            instance_create(x,y+16,obj_statuesmoke)
            with obj_kuriboshoe instance_destroy()

        }

        //Stop riding
        global.yoshi = 0

        //Reset visibility
        visible = 1

    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute destroy event
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,-16</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
