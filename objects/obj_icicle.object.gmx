<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_icicle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>8</depth>
  <persistent>0</persistent>
  <parentName>obj_donut</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Icicle

//Whether this platform is shaking
shake = 0;

//Offset
offset = 0;
alarm[1] = 1;

//Set up alarm
alarm[0] = 28;

//Do not animate
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake if the player is on this donut

//Repeat the process.
alarm[1] = 2;

//Change the offset if this donut is shaking.
if (shake == 1) {

    if (offset = 1)
        offset = -1
    else
        offset = 1
}
else
    offset = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply gravity

//Play 'Icicle Fall' sound
audio_play_sound(snd_icicle_fall, 0, false);

//Set vertical speed
vspeed = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Icicle logic

//If not falling
if (vspeed == 0) {

    //If the player does exist
    if (instance_exists(obj_playerparent)) {
    
        //If the player is above and it's not overlapping a semisolid, resume timer
        if (collision_rectangle(bbox_left, bbox_top-1, bbox_right, bbox_top, obj_playerparent, 0, 0))
        &amp;&amp; (obj_playerparent.state != 2)    
            shake = 1;
    
        //Otherwise, wait to shake.
        else {
        
            //If the player is nearby and below
            if (obj_playerparent.y &gt; bbox_top) {
            
                //If the player is at 8 pixels from this icicle, make it shake and fall
                if (obj_playerparent.x &gt; bbox_left-8) 
                &amp;&amp; (obj_playerparent.x &lt; bbox_right+8)
                    shake = 1;
                    
                //Otherwise, remain there
                else {
                
                    shake = 0;
                    alarm[0] = 28;
                }         
            }
            
            //If the player is not below...
            else {
            
                shake = 0;
                alarm[0] = 28;
            }
        }
    }
    
    //Otherwise, stop
    else {
    
        shake = 0;
        alarm[0] = 28;
    }
}

//Otherwise
else {

    //Do not shake
    shake = 2;
    
    //If moving down
    if (vspeed &gt; 0) {
        
        //Check for floor
        var semisolid = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+1+vspeed, obj_solidtop, 0, 1);
        var slopes = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom+1+vspeed, obj_slopeparent, 1, 1);
        
        //If there's a slope or ground in the way
        if (slopes) || (semisolid) {
        
            //Regenerate
            event_user(0);
            
            //Shatter
            event_user(1);
        }
    }    
    
    //If the player is on this donut
    if (collision_rectangle(bbox_left, bbox_top-5, bbox_right, bbox_top+4, obj_playerparent, 0, 0))
    &amp;&amp; (obj_playerparent.bbox_bottom &lt; yprevious+5)
    &amp;&amp; (obj_playerparent.state != 2) {

        //Check if falling through a semisolid
        var check = collision_rectangle(obj_playerparent.bbox_left, bbox_top-5, obj_playerparent.bbox_right, bbox_top+1, obj_solidtop, 0, 1);
        var check2 = collision_rectangle(obj_playerparent.bbox_left, bbox_top-5, obj_playerparent.bbox_right, bbox_top+1, obj_solidtop, 0, 1); //obj_semisolid_moving
        
        //If not falling through, or falling througn a lower donut, snap the player vertically
        if (!check) 
        &amp;&amp; ((!check2) 
        || (((check2.object_index = obj_donut) || (check2.object_index = obj_donut_red) || (check2.object_index = obj_icicle)) &amp;&amp; ((check2.y &gt; y) || ((check2.y = y) &amp;&amp; (check2 &gt; id)))))
            obj_playerparent.y = ceil(bbox_top-16);
    }
}

//Destroy
if (shake == 2)
&amp;&amp; (bbox_top &gt; view_yview[0] + view_hview[0]) {

    event_user(1);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerparent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hurt the player

//If the player is below it
if (other.bbox_bottom &gt; yprevious+5) {

    //Hurt him
    with (other) event_user(0);
    
    //Destroy and regenerate the icicle
    if (shake == 2) {
    
        event_user(0);
        event_user(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shatter it

//Play 'Icicle Break' sound
audio_play_sound(snd_icicle_break, 0, false);

//Create smoke
with (instance_create(x+8, y+16, obj_smoke)) sprite_index = spr_smoke_16;

//Create shards    
repeat (32) {

    with (instance_create(x+random(16), y+random(32), obj_icicle_shard)) {
    
        motion_set(random(360), random(1));
    }
}
    
//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create a new icicle

//Create a ticker for the new donut
with (instance_create(xstart+8, ystart, obj_donut_ticker)) {

    sprite_index = spr_icicle_appear;
}

//Destroy
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw donut

draw_sprite(sprite_index, shake, round(x)+offset, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
