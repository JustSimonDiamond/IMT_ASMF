<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_balt_idle</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MÃ¡s mierda robada :D

//Sets the animation to reproduce.
//0: Small to big
//1: Big to small
//2: Powerup
//3: Powerdown
//4: Poof
sequence = 0;

//Sets and starts the animation sequences.
ready = 0;

//How many times does the animation loop?
loop = 0;

prevhspeed = 0;

prevvspeed = 0;

//Make Mario invisible
if (instance_exists(obj_playerparent)) {

    //Make Mario invisible.
    obj_playerparent.visible = false;
    
    //Snap to position.
    x = round(obj_playerparent.x);
    y = round(obj_playerparent.y);
    
    //Set the depth
    depth = obj_playerparent.depth;
    
    //Hereby Mario's colour
    isflashing = obj_playerparent.isflashing;
    
    //Hereby Mario's facing direction.
    image_xscale = obj_playerparent.direct;    
}

//Make Yoshi invisible
if (instance_exists(obj_yoshi)) {

    //Hereby both sprite and colour from a existing yoshi
    yoshisprite = obj_yoshi.sprite_index;
    yoshicolour = global.ycolor;
    
    //Make Yoshi invisible
    with (obj_yoshi) visible = 0;
}

//Deactivate tides
/*
if (instance_exists(obj_tides)) {

    with (obj_tides) visible = 0;
    instance_deactivate_object(obj_tides);
}
*/

//Make Kuribo shoe invisible
if (instance_exists(obj_kuriboshoe))
    with (obj_kuriboshoe) visible = 0;
    
//Make puller invisible
if (instance_exists(obj_puller))
    with (obj_puller) visible = false;

//Make spinner invisible
if (instance_exists(obj_spinner))
    with (obj_spinner) visible = false;

//Make dropdown invisible

if (instance_exists(obj_dropdown))
    with (obj_dropdown) visible = false;


//Make wallrunner invisible
if (instance_exists(obj_wallrunner))
    with (obj_wallrunner) visible = false;

//Start animation
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player visible
instance_activate_all()

//If the player is not riding anything
if (global.yoshi == 0) {
    
    //If the player is pulling an item, make said object visible
    if (instance_exists(obj_puller))    
        obj_puller.visible = true;
        
    //Otherwise, if the spinner exists, make said object visible
    if (instance_exists(obj_spinner))    
        obj_spinner.visible = true;
        
    //Otherwise, if the dropdown exists, make said object visible
    if (instance_exists(obj_dropdown))    
        obj_dropdown.visible = true;
    
        
    //Otherwise, if the wallrunner exists make said object visible
    else if (instance_exists(obj_wallrunner))    
        obj_wallrunner.visible = true;
        
    //Otherwise, make the main player visible
    else
        obj_playerparent.image_alpha = 1;
}
    
//If the player is riding a yoshi, make yoshi visible.
if (global.yoshi == 1)
and (instance_exists(obj_yoshi))
    obj_yoshi.visible = true;
    
//Otherwise, if the player is riding a kuribo shoe, make the kuribo shoe visible.
else if (global.yoshi == 2)
and (instance_exists(obj_kuriboshoe))
    obj_kuriboshoe.visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Freeze all objects and begin animation

//Take a screenshot.
back = background_create_from_surface(application_surface,0,0,view_wview[0],view_hview[0],0,0);

//Stop movement on all backgrounds
for (var i=0; i&lt;8; i++) {

    temp_h[i] = background_hspeed[i];
    temp_v[i] = background_vspeed[i];
    background_hspeed[i] = 0;
    background_vspeed[i] = 0;
}

//Pause particles
//with (obj_stormmaker) event_user(0);

//Deactivate all timelines
timeline_running = 0;

//Deactivate all instances.
instance_deactivate_all(true);

//Activate tides
//instance_activate_object(obj_tides);
//with (obj_tides) visible = 1;

//Activate persistent object
instance_activate_object(obj_persistent);

//Activate player object and disable it's gravity
instance_activate_object(obj_playerparent);
prevhspeed = obj_playerparent.hspeed;
prevvspeed = obj_playerparent.vspeed;
obj_playerparent.enable_gravity = 0;
obj_playerparent.visible = 0;

//Set the animation sequence.
switch (sequence) {

    //Small to Big
    case (0): { 
    
        sprite_index = spr_mario_grow;
        image_speed = 0.2; //0.25
    } break;
    
    //Big to Small
    case (1): {
    
        sprite_index = spr_mario_shrink;
        image_speed = 0.2; //0.25
    } break;
    
    //Power up
    case (2): {
    
        sprite_index = spr_mario_powerup;
        image_speed = 0.25;
        loop = 2;
    } break;
    
    //Power down
    case (3): {
    
        sprite_index = spr_mario_powerdown;
        image_speed = 0.3;
        loop = 6;
    } break;
    
    //Transform
    case (4): {
    
        sprite_index = spr_mario_transform;
        image_speed = 0.3;
    } break;
}

//Animation has been set.
ready = true;

//Make the object visible
visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If the animation has ended and no more loops are needed.

if (ready) {

    //Does the animation still loop.
    if (loop &gt; 0) {
    
        //Decrement loop
        loop--;
    }
    else {
    
        //Delete the screenshot if it exists        
        background_delete(back);
        
        //Resume movement on all backgrounds
        for (var i=0; i&lt;8; i++) {
        
            background_hspeed[i] = temp_h[i];
            background_vspeed[i] = temp_v[i];
        }
                     
        //Activate all instances.
        instance_activate_all();
        
        //Resume particles
        //with (obj_rainmaker) event_user(0);
            
        //Activate all timelines
        timeline_running = 1;
        
        //With the player
        with (obj_playerparent) {
        
            //Enable gravity
            enable_gravity = 1;
            
            hspeed = obj_mario_transform.prevhspeed;
            vspeed = obj_mario_transform.prevvspeed;
            disablecontrols = 0;
            
            //Make visible
            visible = true;
            
            //Reset alarm
            if (alarm[0] &gt; -1) then alarm[0] = 90;
            
            //Set alpha back to 1, but check first if the player is not doing a special action.
            if (instance_exists(obj_puller))
            || (instance_exists(obj_spinner))
            || (instance_exists(obj_dropdown))
            || (instance_exists(obj_wallrunner))
                image_alpha = 0;
            else
                image_alpha = 1;
        }
        
        //Destroy
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the player

//If the animation has been set.
if (background_exists(back)) {

    //Disable alpha blending.
    draw_enable_alphablend(0);
    
    //Draw the screenshot
    draw_background(back,view_xview[0],view_yview[0]);
    
    //Enable alpha blending.
    draw_enable_alphablend(1);
}

//If the player is inside a kuribo shoe, draw him inside a kuribo shoe
if (global.yoshi == 2) {
        
    //Draw the player
    draw_sprite_ext(sprite_index,-1,round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);
    
    //Draw the shoe on front
    switch (global.ycolor) {
    
        //Kuribo Shoe
        case (0): draw_sprite_ext(spr_kuriboshoe,0,round(x),round(y)+1,image_xscale,1,0,c_white,1); break;
        
        //Baburu Shoe
        case (1): draw_sprite_ext(spr_baburushoe,0,round(x),round(y)+1,image_xscale,1,0,c_white,1); break;
        
        //Kuribo Shoe
        case (2): draw_sprite_ext(spr_dossunshoe,0,round(x),round(y)+1,image_xscale,1,0,c_white,1); break;
        
        //Jugemu Shoe
        case (3): draw_sprite_ext(spr_jugemushoe,0,round(x),round(y)+1,image_xscale,1,0,c_white,1); break;
    }
}

//Otherwise if the player is riding a yoshi, draw him mounted on yoshi.
else if (global.yoshi == 1) {

    //Set the palette
    //pal_swap_set(spr_palette_yoshi, yoshicolour);
    
    //Draw Yoshi
    draw_sprite_ext(yoshisprite,0,round(x),round(y)+1,image_xscale,1,0,c_white,1);
    
    //Reset the shader
    //pal_swap_reset();
    
    //Draw the player
    if (sequence == 3) {
    
        if (image_xscale == 1)
            draw_sprite_ext(sprite_index,-1,round(x)-4,round(y)-9,1,1,0,c_white,1);
        else if (image_xscale == -1)
            draw_sprite_ext(sprite_index,-1,round(x)+4,round(y)-9,1,1,0,c_white,1);
    }
    else {
    
        if (image_xscale == 1)
            draw_sprite_ext(sprite_index,-1,round(x)-4,round(y)-9,1,1,0,c_white,1);
        else if (image_xscale == -1)
            draw_sprite_ext(sprite_index,-1,round(x)+4,round(y)-9,-1,1,0,c_white,1);
    }    
}

//Otherwise, draw normally
else
    draw_sprite_ext(sprite_index,-1,round(x),round(y)+1,image_xscale,1,0,c_white,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
