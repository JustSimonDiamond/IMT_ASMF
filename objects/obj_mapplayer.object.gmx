<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mapmario_idle_0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mapmario_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player in the worldmap!

/*//If the player has been on the world map in the past
if (ds_map_exists(global.worldmap,"returnx"))
{

    //Load player's previous position
    x = ds_map_find_value(global.worldmap,"mapx");
    y = ds_map_find_value(global.worldmap,"mapy");

}

//If this is player's first time on the world map
else
{

    //Set the return variables to the current location
    ds_map_add(global.worldmap,"returnx",x);
    ds_map_add(global.worldmap,"returny",y);

}

//Load the return variables
returnx = ds_map_find_value(global.worldmap,"mapx");
returny = ds_map_find_value(global.worldmap,"mapy");
*/

//Animation variable
anim = 0;

//Facing Direction
direct = 0
xscale = 1

//Object's current state
state = 0;
eventanim = 0;

//Player's Speed
myspeed = 2.5;

//The text to be displayed on the HUD as the level name
text = "";

//Inventory Value
inventory = 0;

//Selected box item
selecteditem = 1;

//Reset all of these global variables
global.timer = 0;
global.mariostart = 0;
global.carrieditem = noone;
global.carriedsprite = noone;
global.shallihold = 0;
global.pswitch = 0;
global.star = 0;
global.onoffblock = 0;
global.died = 0;
global.pmeter = 0;
global.grayblockon = 1;

//Play the music
alarm[3] = 1;

//Prevent shoes from being taken between levels
if (global.yoshi == 2)
    global.yoshi = 0;
    
//Clear the records of collected ace coins
ds_map_clear(global.acecoins)

//If the player has exit from a level, change the powerup if it's a Golden Tanooki
if (global.powerup == cs_goldtan)
    global.powerup = cs_leaf;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop the music
audio_stop_sound(global.mapmusic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play the world map music
if (!audio_is_playing(global.mapmusic)) 
    audio_play_sound(global.mapmusic,99,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles sprites

//Moving Sprite
if (vspeed != 0
|| hspeed != 0)
{
    var animspeed; animspeed = 0.5;
    
    if (direct == 0)
    {
        sprite_index = spr_mapmario_walk_0;
        image_speed = animspeed;
    }
    else if (direct == 1
    || direct == 7)
    {
        sprite_index = spr_mapmario_walk_1;
        image_speed = animspeed;
    }
    else if (direct == 2
    || direct == 6)
    {
        sprite_index = spr_mapmario_walk_2;
        image_speed = animspeed;
    }
    else if (direct == 3
    || direct == 5)
    {
        sprite_index = spr_mapmario_walk_3;
        image_speed = animspeed;
    }
    else if (direct == 4)
    {
        sprite_index = spr_mapmario_walk_4;
        image_speed = animspeed;
    }
}

//Idle sprite
else if (state &gt; 0)
{
    if (eventanim)
    {
        sprite_index = spr_mapmario_event_idle;
        image_speed = 0.25;
    }
    else
    {
        sprite_index = spr_mapmario_event_start;
        image_speed = 0.15;
    }
}
else
{
    var animspeed; animspeed = 0.25;
    
    if (direct == 0)
    {
        sprite_index = spr_mapmario_idle_0;
        image_speed = animspeed;
    }
    else if (direct == 1
    || direct == 7)
    {
        sprite_index = spr_mapmario_idle_1;
        image_speed = animspeed;
    }
    else if (direct == 2
    || direct == 6)
    {
        sprite_index = spr_mapmario_idle_2;
        image_speed = animspeed;
    }
    else if (direct == 3
    || direct == 5)
    {
        sprite_index = spr_mapmario_idle_3;
        image_speed = animspeed;
    }
    else if (direct == 4)
    {
        sprite_index = spr_mapmario_idle_4;
        image_speed = animspeed;
    }
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Worldmap Logic

//Mario animaci√≥n uwu
anim += 0.07;

//wao
if (keyboard_check_pressed(ord('M')))
{
    x = xstart;
    y = ystart;
    hspeed = 0;
    vspeed = 0;
}

//Direction change
if (direct == 5
|| direct == 6
|| direct == 7)
    xscale = -1;
else
    xscale = 1;
    
//Stop this freaky sound if its playing on.
if (audio_is_playing(snd_hurryup)) then audio_stop_sound(snd_hurryup);

//Normal state
if (state == 0)
{

    //Can move upwards
    if (keyboard_check(vk_up)
    &amp;&amp; !keyboard_check(vk_down))
    {
        direct = 4;
        vspeed = -myspeed;
    }
    
    //Can move downwards
    else if (keyboard_check(vk_down)
    &amp;&amp; !keyboard_check(vk_up))
    {
        direct = 0;
        vspeed = myspeed;
    }
    
    //Stop up and down movement
    else if (!keyboard_check(vk_up)
    || !keyboard_check(vk_down)
    || (keyboard_check(vk_up)
    &amp;&amp; keyboard_check(vk_down)))
    {
        vspeed = 0;
    }
    
    //Can move to the left
    if (keyboard_check(vk_left)
    &amp;&amp; !keyboard_check(vk_right))
    {
        if (keyboard_check(vk_up))
            direct = 5;
        else if (keyboard_check(vk_down))
            direct = 7;
        else
            direct = 6;
        hspeed = -myspeed;
    }
    
    //Can move to the right
    else if (keyboard_check(vk_right)
    &amp;&amp; !keyboard_check(vk_left))
    {
        if (keyboard_check(vk_up))
            direct = 3;
        else if (keyboard_check(vk_down))
            direct = 1;
        else
            direct = 2;
        hspeed = myspeed;
    }
    
    //Stop left and right movement
    else if (!keyboard_check(vk_left)
    || !keyboard_check(vk_right)
    || (keyboard_check(vk_left)
    &amp;&amp; keyboard_check(vk_right)))
    {
        hspeed = 0;
    }
    
    //Open up the inventory
    if (inventory == 0
    &amp;&amp; keyboard_check_pressed(vk_space))
    {
    
        //Play the inventory sound
        audio_play_sound(snd_inventory,0,0);
        
        //Stop the movement
        vspeed = 0;
        hspeed = 0;
        
        //Change the state
        state = 3;
        
        //Open the inventory
        inventory = 1;
        
        //Reset the selected item
        selecteditem = 1;
        
        //If the inventory is empty
        if (global.inventory[0] = 0)
        {
            
            //Select nothing if the reserve is empty, otherwise select it
            if (global.reserveitem = cs_small)
                selecteditem = 0;
            else
                selecteditem = 16;
        }
    }
    
}

//If the inventory is open
else if (inventory == 1)
{
    //If the space key is pressec
    if (keyboard_check_pressed(vk_space))
    {
        //Play the sound
        audio_play_sound(snd_inventory,0,0);
        
        //Go back to normal state
        state = 0;
        eventanim = 0;
        
        //Close the inventory
        inventory = 0;
    }
    
    //If the inventory isn't empty
    else if (selecteditem != 0)
    {
        //If shift is pressed
        if (keyboard_check_pressed(vk_shift))
        {

            //If the item selected is the reserve item
            if (selecteditem == 16)
            {

                //Swap the current powerup with the reserve item
                var previous = global.powerup;
                global.powerup = global.reserveitem;
                global.reserveitem = previous;

                //Finish item retrieval
                event_user(1);

            }

            //If the item selected is not the reserve item
            else
            {

                //Remember the last powerup
                var previous = global.powerup;

                //Change the powerup to the selected item
                global.powerup = global.inventory[selecteditem];

                //If Mario had no powerup previously
                if (previous == 0)
                {

                    //Shift the inventory items over by one
                    for(var i = selecteditem; i &lt; global.inventory[0]; i++)
                        global.inventory[i] = global.inventory[i+1];

                    //Subtract from the number of items in the inventory
                    global.inventory[0]--;

                }

                //Otherwise, put the old powerup in the inventory
                else
                    global.inventory[selecteditem] = previous;

                //Finish item retrieval
                event_user(1);

            }

        }
        
        //If left is pressed, there are items in the inventory, and the selected item is not the leftmost item
        else if (selecteditem &gt; 1
        &amp;&amp; global.inventory[0] != 0
        &amp;&amp; keyboard_check_pressed(vk_left))
        {

            //If the reserve item is selected, go to the last inventory item
            if (selecteditem = 16)
                selecteditem = global.inventory[0];

            //Otherwise, go left one item
            else
                selecteditem--;

            //Play the move sound
            audio_play_sound(snd_move,0,0);

        }

        //If right is pressed, and the selected item is not the rightmost item
        else if (selecteditem &lt; 16
        &amp;&amp; keyboard_check_pressed(vk_right))
        {

            //If there are more inventory items, go right one
            if (selecteditem &lt; global.inventory[0])
                selecteditem++;

            //Otherwise, if there is a reserve item, go to it
            else if (global.reserveitem &gt; cs_small)
                selecteditem = 16;

            //Otherwise, do not play the move sound
            else
                exit;

            //Play the move sound
            audio_play_sound(snd_move,0,0);

        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mapmusicchanger">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Si se choca con el objeto de cambio de m√∫sica
if (state == 0) {

    //Si la m√∫sica no es la misma que la del objeto
    if (global.mapmusic != other.mapmusic) {
    
        //Detener la m√∫sica
        audio_stop_sound(global.mapmusic);
    
        //Cambiar el valor global de la m√∫sica
        global.mapmusic = other.mapmusic;
    
        //Y reproducir la nueva m√∫sica
        alarm[3] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory retrieval script

//Play the reserve item sound
audio_play_sound(snd_retrieve,0,0);

//Create smoke
with (instance_create(x,y,obj_smoke)) depth = -100;

//Go back to the normal state
state = 0;
eventanim = 0;

//Close the inventory
inventory = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation End Event

if (sprite_index == spr_mapmario_event_start)
    eventanim = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crear un efecto culero
instance_create(0,0,obj_fadeout)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

//Draw the player
draw_sprite_ext(sprite_index, image_index, round(x), round(y), xscale, 1, 0, c_white, 1);

//Draw the HUD box
if (global.player == 0)
    draw_sprite_ext(spr_mapscreenbox,inventory,view_xview[0]+32,view_yview[0]+186,1,1,0,c_white,0.7);
else if (global.player == 1)
    draw_sprite_ext(spr_mapscreenbox_luigi,inventory,view_xview[0]+32,view_yview[0]+186,1,1,0,c_white,0.7);

draw_sprite_ext(scr_mariomap(),anim*2,view_xview[0]+48,view_yview[0]+8,1,1,0,c_white,1);

//If the inventory is not opened up
if (inventory == 0)
{

    //Set the draw alpha
    draw_set_alpha(0.7);

    //Set the font
    draw_set_font(global.font);

    //Draw the name of the panel Mario is on
    draw_text(view_xview[0]+164,view_yview[0]+197,text);

    //Set the font
    draw_set_font(global.wdigits);

    //Draw the lives
    draw_text(view_xview[0]+64,view_yview[0]+198,string_format(lives,2,0));

    //Draw the score
    draw_text(view_xview[0]+97,view_yview[0]+198,string_add_zeros(score,7));

    //Draw the reserve item
    if (global.reserveitem != cs_small)
        draw_sprite_ext(scr_constant_get_sprite(global.reserveitem),0,view_xview[0]+330,view_yview[0]+193,1,1,0,c_white,0.7);

    //Reset the draw alpha
    draw_set_alpha(1);

}

//Si el inventario est√° abierto
else
{
    
    //Iterate over the inventory items
    for(var i = 1; i &lt;= global.inventory[0]; i++)
    {
        
        //Usar un sprite de orillas si este objeto no est√° seleccionado
        if selecteditem = i
            draw_sprite_ext(scr_constant_get_sprite(global.inventory[i]),0,view_xview[0]+39+(i-1)*19,view_yview[0]+193,1,1,0,c_white,1);
        else
            draw_sprite_ext(scr_outlineitem(global.inventory[i]),0,view_xview[0]+39+(i-1)*19,view_yview[0]+193,1,1,0,c_white,1);
    }
    
    //Usar un sprite de orillas si el objeto de reserva no est√° seleccionado
    if (selecteditem == 16) 
    {
        if (global.reserveitem != cs_small) 
            draw_sprite_ext(scr_constant_get_sprite(global.reserveitem),0,view_xview[0]+330,view_yview[0]+193,1,1,0,c_white,1);
    }
    else 
    {
        if global.reserveitem != cs_small 
            draw_sprite_ext(scr_outlineitem(global.reserveitem),0,view_xview[0]+330,view_yview[0]+193,1,1,0,c_white,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Men√∫ de pausa

//Si este objeto ya est√° funcionando como es debido
if (state == 0)
{

    //...y el alt no est√° presionado
    if (!keyboard_check(vk_alt))
    {
        
        //Guardar la posici√≥n actual del objeto
        ds_map_replace(global.worldmap,"mapx",x);
        ds_map_replace(global.worldmap,"mapy",y);

        //Crear el men√∫ de pausa
        instance_create(0,0,obj_pausemap);

        //Suelta al enter
        keyboard_clear(vk_enter);

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
